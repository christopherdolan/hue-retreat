"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _events = require("events");

var _events2 = _interopRequireDefault(_events);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _crypto = require("crypto");

var _crypto2 = _interopRequireDefault(_crypto);

var _axios = require("axios");

var _axios2 = _interopRequireDefault(_axios);

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = require("debug")("philips-hue");

var PhilipsHue = function (_events$EventEmitter) {
  _inherits(PhilipsHue, _events$EventEmitter);

  function PhilipsHue() {
    _classCallCheck(this, PhilipsHue);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PhilipsHue).call(this));

    _this.devicetype = 'node-philips-hue';
    _this.bridge = null;
    _this.username = null;
    return _this;
  }

  _createClass(PhilipsHue, [{
    key: "login",
    value: function login(confFile) {
      var _this2 = this;

      if (typeof confFile !== "string") return Promise.reject("Argument Error: config file is missing");
      debug("login file: " + confFile);
      try {
        if (_fs2.default.statSync(confFile).isFile()) {
          var conf = require(confFile);
          this.bridge = conf.bridge;
          this.username = conf.username;
          this.devicetype = conf.devicetype;
          return Promise.resolve(conf);
        }
      } catch (err) {
        debug("config file not exists");
      }
      debug("generate config file " + confFile);
      return this.getBridges().then(function (bridges) {
        debug("found bridges: " + JSON.stringify(bridges));
        _this2.bridge = bridges[0];
        if (!/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(_this2.bridge)) {
          throw "invalid bridge address \"" + _this2.bridge + "\"";
        }
        return _this2.auth(_this2.bridge);
      }).then(function (username) {
        _this2.username = username;
        var conf = { bridge: _this2.bridge, username: username, devicetype: _this2.devicetype };
        _fs2.default.writeFileSync(confFile, JSON.stringify(conf));
        return conf;
      });
    }
  }, {
    key: "generateUserName",
    value: function generateUserName() {
      return _crypto2.default.createHash('md5').update(this.devicetype + " " + process.env.USER + " " + Date.now()).digest("hex");
    }
  }, {
    key: "getBridges",
    value: function getBridges() {
      debug("getBridges");
      return _axios2.default.get("https://www.meethue.com/api/nupnp").then(function (res) {
        (0, _util.checkResponse)(res.data);
        return res.data.map(function (i) {
          return i.internalipaddress;
        });
      });
    }
  }, {
    key: "auth",
    value: function auth(bridge) {
      debug("auth bridge: " + bridge);
      var username = this.generateUserName();
      return (0, _axios2.default)({
        method: "post",
        url: "http://" + bridge + "/api",
        data: JSON.stringify({
          devicetype: this.devicetype,
          username: username
        })
      }).then(function (res) {
        debug(res.data);
        (0, _util.checkResponse)(res.data);
        return username;
      });
    }

    // Bridge API request

  }, {
    key: "request",
    value: function request(opts) {
      var url = "http://" + this.bridge + "/api/" + this.username;
      return (0, _axios2.default)({
        url: "" + url + opts.path,
        method: opts.method || 'get',
        data: opts.data ? JSON.stringify(opts.data) : null
      }).then(function (res) {
        debug(res.data);
        (0, _util.checkResponse)(res.data);
        return res.data;
      });
    }
  }]);

  return PhilipsHue;
}(_events2.default.EventEmitter);

exports.default = PhilipsHue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9waGlsaXBzLWh1ZS5lczYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNQSxJQUFNLFFBQVEsUUFBUSxPQUFSLEVBQWlCLGFBQWpCLENBQVI7O0lBSWU7OztBQUVuQixXQUZtQixVQUVuQixHQUFhOzBCQUZNLFlBRU47O3VFQUZNLHdCQUVOOztBQUVYLFVBQUssVUFBTCxHQUFrQixrQkFBbEIsQ0FGVztBQUdYLFVBQUssTUFBTCxHQUFjLElBQWQsQ0FIVztBQUlYLFVBQUssUUFBTCxHQUFnQixJQUFoQixDQUpXOztHQUFiOztlQUZtQjs7MEJBU2IsVUFBUzs7O0FBQ2IsVUFBRyxPQUFPLFFBQVAsS0FBb0IsUUFBcEIsRUFBOEIsT0FBTyxRQUFRLE1BQVIsQ0FBZSx3Q0FBZixDQUFQLENBQWpDO0FBQ0EsNkJBQXFCLFFBQXJCLEVBRmE7QUFHYixVQUFHO0FBQ0QsWUFBRyxhQUFHLFFBQUgsQ0FBWSxRQUFaLEVBQXNCLE1BQXRCLEVBQUgsRUFBa0M7QUFDaEMsY0FBSSxPQUFPLFFBQVEsUUFBUixDQUFQLENBRDRCO0FBRWhDLGVBQUssTUFBTCxHQUFjLEtBQUssTUFBTCxDQUZrQjtBQUdoQyxlQUFLLFFBQUwsR0FBZ0IsS0FBSyxRQUFMLENBSGdCO0FBSWhDLGVBQUssVUFBTCxHQUFrQixLQUFLLFVBQUwsQ0FKYztBQUtoQyxpQkFBTyxRQUFRLE9BQVIsQ0FBZ0IsSUFBaEIsQ0FBUCxDQUxnQztTQUFsQztPQURGLENBU0EsT0FBTSxHQUFOLEVBQVU7QUFDUixjQUFNLHdCQUFOLEVBRFE7T0FBVjtBQUdBLHNDQUE4QixRQUE5QixFQWZhO0FBZ0JiLGFBQU8sS0FDSixVQURJLEdBRUosSUFGSSxDQUVDLG1CQUFXO0FBQ2Ysa0NBQXdCLEtBQUssU0FBTCxDQUFlLE9BQWYsQ0FBeEIsRUFEZTtBQUVmLGVBQUssTUFBTCxHQUFjLFFBQVEsQ0FBUixDQUFkLENBRmU7QUFHZixZQUFHLENBQUUsdUNBQXVDLElBQXZDLENBQTRDLE9BQUssTUFBTCxDQUE5QyxFQUE0RDtBQUM3RCw4Q0FBaUMsT0FBSyxNQUFMLE9BQWpDLENBRDZEO1NBQS9EO0FBR0EsZUFBTyxPQUFLLElBQUwsQ0FBVSxPQUFLLE1BQUwsQ0FBakIsQ0FOZTtPQUFYLENBRkQsQ0FVSixJQVZJLENBVUMsb0JBQVk7QUFDaEIsZUFBSyxRQUFMLEdBQWdCLFFBQWhCLENBRGdCO0FBRWhCLFlBQUksT0FBTyxFQUFDLFFBQVEsT0FBSyxNQUFMLEVBQWEsVUFBVSxRQUFWLEVBQW9CLFlBQVksT0FBSyxVQUFMLEVBQTdELENBRlk7QUFHaEIscUJBQUcsYUFBSCxDQUFpQixRQUFqQixFQUEyQixLQUFLLFNBQUwsQ0FBZSxJQUFmLENBQTNCLEVBSGdCO0FBSWhCLGVBQU8sSUFBUCxDQUpnQjtPQUFaLENBVlIsQ0FoQmE7Ozs7dUNBa0NHO0FBQ2hCLGFBQU8saUJBQ0osVUFESSxDQUNPLEtBRFAsRUFFSixNQUZJLENBRU0sS0FBSyxVQUFMLFNBQW1CLFFBQVEsR0FBUixDQUFZLElBQVosU0FBb0IsS0FBSyxHQUFMLEVBRjdDLEVBR0osTUFISSxDQUdHLEtBSEgsQ0FBUCxDQURnQjs7OztpQ0FPTjtBQUNWLFlBQU0sWUFBTixFQURVO0FBRVYsYUFBTyxnQkFDSixHQURJLENBQ0EsbUNBREEsRUFFSixJQUZJLENBRUMsZUFBTztBQUNYLGlDQUFjLElBQUksSUFBSixDQUFkLENBRFc7QUFFWCxlQUFPLElBQUksSUFBSixDQUFTLEdBQVQsQ0FBYSxhQUFLO0FBQUMsaUJBQU8sRUFBRSxpQkFBRixDQUFSO1NBQUwsQ0FBcEIsQ0FGVztPQUFQLENBRlIsQ0FGVTs7Ozt5QkFVUCxRQUFPO0FBQ1YsOEJBQXNCLE1BQXRCLEVBRFU7QUFFVixVQUFJLFdBQVcsS0FBSyxnQkFBTCxFQUFYLENBRk07QUFHVixhQUFPLHFCQUFNO0FBQ1gsZ0JBQVEsTUFBUjtBQUNBLHlCQUFlLGVBQWY7QUFDQSxjQUFNLEtBQUssU0FBTCxDQUFlO0FBQ25CLHNCQUFZLEtBQUssVUFBTDtBQUNaLG9CQUFVLFFBQVY7U0FGSSxDQUFOO09BSEssRUFPSixJQVBJLENBT0MsZUFBTztBQUNiLGNBQU0sSUFBSSxJQUFKLENBQU4sQ0FEYTtBQUViLGlDQUFjLElBQUksSUFBSixDQUFkLENBRmE7QUFHYixlQUFPLFFBQVAsQ0FIYTtPQUFQLENBUFIsQ0FIVTs7Ozs7Ozs0QkFrQkosTUFBSztBQUNYLFVBQU0sa0JBQWdCLEtBQUssTUFBTCxhQUFtQixLQUFLLFFBQUwsQ0FEOUI7QUFFWCxhQUFPLHFCQUFNO0FBQ1gsa0JBQVEsTUFBTSxLQUFLLElBQUw7QUFDZCxnQkFBUSxLQUFLLE1BQUwsSUFBZSxLQUFmO0FBQ1IsY0FBTSxLQUFLLElBQUwsR0FBWSxLQUFLLFNBQUwsQ0FBZSxLQUFLLElBQUwsQ0FBM0IsR0FBd0MsSUFBeEM7T0FIRCxFQUlKLElBSkksQ0FJQyxlQUFPO0FBQ2IsY0FBTSxJQUFJLElBQUosQ0FBTixDQURhO0FBRWIsaUNBQWMsSUFBSSxJQUFKLENBQWQsQ0FGYTtBQUdiLGVBQU8sSUFBSSxJQUFKLENBSE07T0FBUCxDQUpSLENBRlc7Ozs7U0E5RU07RUFBbUIsaUJBQU8sWUFBUDs7a0JBQW5CIiwiZmlsZSI6InBoaWxpcHMtaHVlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBldmVudHMgZnJvbSBcImV2ZW50c1wiO1xuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IGNyeXB0byBmcm9tIFwiY3J5cHRvXCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcInBoaWxpcHMtaHVlXCIpO1xuXG5pbXBvcnQge2NoZWNrUmVzcG9uc2V9IGZyb20gXCIuL3V0aWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGhpbGlwc0h1ZSBleHRlbmRzIGV2ZW50cy5FdmVudEVtaXR0ZXJ7XG5cbiAgY29uc3RydWN0b3IoKXtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZGV2aWNldHlwZSA9ICdub2RlLXBoaWxpcHMtaHVlJztcbiAgICB0aGlzLmJyaWRnZSA9IG51bGw7XG4gICAgdGhpcy51c2VybmFtZSA9IG51bGw7XG4gIH1cblxuICBsb2dpbihjb25mRmlsZSl7XG4gICAgaWYodHlwZW9mIGNvbmZGaWxlICE9PSBcInN0cmluZ1wiKSByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJBcmd1bWVudCBFcnJvcjogY29uZmlnIGZpbGUgaXMgbWlzc2luZ1wiKTtcbiAgICBkZWJ1ZyhgbG9naW4gZmlsZTogJHtjb25mRmlsZX1gKTtcbiAgICB0cnl7XG4gICAgICBpZihmcy5zdGF0U3luYyhjb25mRmlsZSkuaXNGaWxlKCkpe1xuICAgICAgICB2YXIgY29uZiA9IHJlcXVpcmUoY29uZkZpbGUpO1xuICAgICAgICB0aGlzLmJyaWRnZSA9IGNvbmYuYnJpZGdlO1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gY29uZi51c2VybmFtZTtcbiAgICAgICAgdGhpcy5kZXZpY2V0eXBlID0gY29uZi5kZXZpY2V0eXBlO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNvbmYpO1xuICAgICAgfVxuICAgIH1cbiAgICBjYXRjaChlcnIpe1xuICAgICAgZGVidWcoXCJjb25maWcgZmlsZSBub3QgZXhpc3RzXCIpO1xuICAgIH1cbiAgICBkZWJ1ZyhgZ2VuZXJhdGUgY29uZmlnIGZpbGUgJHtjb25mRmlsZX1gKTtcbiAgICByZXR1cm4gdGhpc1xuICAgICAgLmdldEJyaWRnZXMoKVxuICAgICAgLnRoZW4oYnJpZGdlcyA9PiB7XG4gICAgICAgIGRlYnVnKGBmb3VuZCBicmlkZ2VzOiAke0pTT04uc3RyaW5naWZ5KGJyaWRnZXMpfWApO1xuICAgICAgICB0aGlzLmJyaWRnZSA9IGJyaWRnZXNbMF07XG4gICAgICAgIGlmKCEoL15cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM31cXC5cXGR7MSwzfSQvLnRlc3QodGhpcy5icmlkZ2UpKSl7XG4gICAgICAgICAgdGhyb3cgYGludmFsaWQgYnJpZGdlIGFkZHJlc3MgXCIke3RoaXMuYnJpZGdlfVwiYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hdXRoKHRoaXMuYnJpZGdlKTtcbiAgICAgIH0pXG4gICAgICAudGhlbih1c2VybmFtZSA9PiB7XG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSB1c2VybmFtZTtcbiAgICAgICAgdmFyIGNvbmYgPSB7YnJpZGdlOiB0aGlzLmJyaWRnZSwgdXNlcm5hbWU6IHVzZXJuYW1lLCBkZXZpY2V0eXBlOiB0aGlzLmRldmljZXR5cGV9O1xuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKGNvbmZGaWxlLCBKU09OLnN0cmluZ2lmeShjb25mKSk7XG4gICAgICAgIHJldHVybiBjb25mO1xuICAgICAgfSk7XG4gIH1cblxuICBnZW5lcmF0ZVVzZXJOYW1lKCl7XG4gICAgcmV0dXJuIGNyeXB0b1xuICAgICAgLmNyZWF0ZUhhc2goJ21kNScpXG4gICAgICAudXBkYXRlKGAke3RoaXMuZGV2aWNldHlwZX0gJHtwcm9jZXNzLmVudi5VU0VSfSAke0RhdGUubm93KCl9YClcbiAgICAgIC5kaWdlc3QoXCJoZXhcIik7XG4gIH1cblxuICBnZXRCcmlkZ2VzKCl7XG4gICAgZGVidWcoXCJnZXRCcmlkZ2VzXCIpO1xuICAgIHJldHVybiBheGlvc1xuICAgICAgLmdldChcImh0dHBzOi8vd3d3Lm1lZXRodWUuY29tL2FwaS9udXBucFwiKVxuICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgY2hlY2tSZXNwb25zZShyZXMuZGF0YSk7XG4gICAgICAgIHJldHVybiByZXMuZGF0YS5tYXAoaSA9PiB7cmV0dXJuIGkuaW50ZXJuYWxpcGFkZHJlc3N9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgYXV0aChicmlkZ2Upe1xuICAgIGRlYnVnKGBhdXRoIGJyaWRnZTogJHticmlkZ2V9YCk7XG4gICAgdmFyIHVzZXJuYW1lID0gdGhpcy5nZW5lcmF0ZVVzZXJOYW1lKCk7XG4gICAgcmV0dXJuIGF4aW9zKHtcbiAgICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgICB1cmw6IGBodHRwOi8vJHticmlkZ2V9L2FwaWAsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGRldmljZXR5cGU6IHRoaXMuZGV2aWNldHlwZSxcbiAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lXG4gICAgICB9KVxuICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgIGRlYnVnKHJlcy5kYXRhKTtcbiAgICAgIGNoZWNrUmVzcG9uc2UocmVzLmRhdGEpO1xuICAgICAgcmV0dXJuIHVzZXJuYW1lO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gQnJpZGdlIEFQSSByZXF1ZXN0XG4gIHJlcXVlc3Qob3B0cyl7XG4gICAgY29uc3QgdXJsID0gYGh0dHA6Ly8ke3RoaXMuYnJpZGdlfS9hcGkvJHt0aGlzLnVzZXJuYW1lfWA7XG4gICAgcmV0dXJuIGF4aW9zKHtcbiAgICAgIHVybDogYCR7dXJsfSR7b3B0cy5wYXRofWAsXG4gICAgICBtZXRob2Q6IG9wdHMubWV0aG9kIHx8ICdnZXQnLFxuICAgICAgZGF0YTogb3B0cy5kYXRhID8gSlNPTi5zdHJpbmdpZnkob3B0cy5kYXRhKSA6IG51bGxcbiAgICB9KS50aGVuKHJlcyA9PiB7XG4gICAgICBkZWJ1ZyhyZXMuZGF0YSk7XG4gICAgICBjaGVja1Jlc3BvbnNlKHJlcy5kYXRhKTtcbiAgICAgIHJldHVybiByZXMuZGF0YTtcbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=